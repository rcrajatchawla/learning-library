// Code generated by go-bindata.
// sources:
// rule/Vale/Repetition.yml
// rule/Vale/Spelling.yml
// DO NOT EDIT!

package rule

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _ruleValeRepetitionYml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x2c\xcb\x4d\xaa\xc3\x40\x0c\x03\xe0\xbd\x4f\xa1\x37\xf0\x98\x45\xc9\x05\x7c\x95\xfe\x80\x49\x44\x3b\x34\x99\x04\xdb\x2d\x3d\x7e\x49\xe8\x52\xd2\x27\x7e\x92\x7d\x0a\x85\x73\x63\xb6\x6c\x6b\x97\x85\x11\x76\xa7\xa2\xd4\xff\xa8\x68\x71\x8c\x96\x9c\xfe\x8a\xcc\x7c\x73\x56\xd0\x7d\x75\xb1\x79\x7b\x98\x22\xfd\x45\xb1\x71\x3f\xab\x00\xdd\x16\x2a\x38\xb5\x14\x60\x33\xb7\x25\xf6\x1a\x18\x76\xd9\x47\x4b\xfe\x62\x41\x91\x5c\x9f\xec\x07\x18\x50\xcf\xb7\x4b\x5c\x4f\x55\xbe\x01\x00\x00\xff\xff\x07\x7d\xac\x4a\x97\x00\x00\x00")

func ruleValeRepetitionYmlBytes() ([]byte, error) {
	return bindataRead(
		_ruleValeRepetitionYml,
		"rule/Vale/Repetition.yml",
	)
}

func ruleValeRepetitionYml() (*asset, error) {
	bytes, err := ruleValeRepetitionYmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "rule/Vale/Repetition.yml", size: 151, mode: os.FileMode(493), modTime: time.Unix(1568395026, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _ruleValeSpellingYml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x3c\xcd\x31\xae\x83\x30\x10\x45\xd1\x7e\x56\xf1\x84\xf4\x45\xc5\x5f\x80\x9b\x34\xd9\xc8\x04\x9e\x2c\x4b\xf6\x18\xcd\x18\x04\xbb\x8f\x68\xd2\xde\x5b\x1c\x5e\x83\xb6\x45\x42\xec\xac\xb5\x58\x96\xc6\x08\xcd\x4c\x98\xde\x65\xc3\xdd\x0f\x38\xb5\xd6\x1b\x8d\x6a\x98\xff\x62\x7e\x4d\x52\x79\xb2\x26\xd0\xbd\xbb\xe8\x3a\x4a\xb7\x24\x80\x69\x63\x42\x1c\x39\x33\x86\x00\xbb\xba\xb6\x78\x0e\xb0\xfc\x88\x90\x92\xad\x3b\x9f\xbe\xe0\xec\xab\x7e\xfe\xc7\x35\xe4\x1b\x00\x00\xff\xff\x68\x62\x7d\xaa\x8c\x00\x00\x00")

func ruleValeSpellingYmlBytes() ([]byte, error) {
	return bindataRead(
		_ruleValeSpellingYml,
		"rule/Vale/Spelling.yml",
	)
}

func ruleValeSpellingYml() (*asset, error) {
	bytes, err := ruleValeSpellingYmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "rule/Vale/Spelling.yml", size: 140, mode: os.FileMode(493), modTime: time.Unix(1568750513, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"rule/Vale/Repetition.yml": ruleValeRepetitionYml,
	"rule/Vale/Spelling.yml": ruleValeSpellingYml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"rule": &bintree{nil, map[string]*bintree{
		"Vale": &bintree{nil, map[string]*bintree{
			"Repetition.yml": &bintree{ruleValeRepetitionYml, map[string]*bintree{}},
			"Spelling.yml": &bintree{ruleValeSpellingYml, map[string]*bintree{}},
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

